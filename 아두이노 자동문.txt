#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define RST_PIN 9
#define SS_PIN 10

MFRC522 rfid(SS_PIN, RST_PIN);

LiquidCrystal_I2C lcd(0x27, 20, 4);

Servo myservo;

const char keymap[4][4] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
} // 키에 맞는 값을 2차원 배열값으로 만들고 초기화

const int rpin[] = {5, 4, 3, 2};
const int cpin[] = {A3, A2, A1, A0};

char newKey = 0;
char oldKey = 0;

int lockNunlock = 0;

char pass0 = '0';
char pass1 = '9';
char pass2 = '1';
char pass3 = '9';

byte rfidPass0 = 0xBB;
byte rfidPass1 = 0xA2;
byte rfidPass2 = 0x2A;
byte rfidPass3 = 0x22;

char passInBuff[4];
int passCnt = 0;

#define BUZZER_PIN 8
#define SERVO_PIN 7

void setup() 
{
  Serial.begin(9600);
  for(int i=0; i<4; i++) // 각핀들을 입출력으로 설정
  {
    pinMode(rpin[i], OUTPUT);
    pinMode(cpin[i], INPUT_PULUP);
  }
  myservo.attach(SERVO_PIN);
  myservo.write(90);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);
  SPI.begin();
  rfid.PCD_Init();
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("PASS: ");

}

void loop() 
{
  newKey = getkey();
  if (newkey != oldkey)
  {
    oldkey = newkey;
    if(newkey != 0)
    {
      Serial.println(newKey);
      passInBuff[passCnt++] = newKey;
      lcd.print("*");
      if(passCnt >= 4)
      {
        lcd.clear();
        lcd.print("PASS: ");
        passCnt = 0;
        if(passInBuff[0] == pass0 && passInBuff[1] == pass1 && passInBuff[2] == pass2 && passInBuff[3] == pass3)
        {
          Serial.println("ok");
          lockNunlock = 1;
        }
      }
    }
    delay(50);
  }

  if(rfid.PICC_IsNewCardPresent()) // 새로운 카드 입력시
  {
    if(rfid.PICC_ReadCardSerial()) // 카드값을 읽었을 시
    {
      Serial.print("value = ");                  
      Serial.print(rfid.uid.uidByte[0], HEX);
      Serial.print(rfid.uid.uidByte[1], HEX);
      Serial.print(rfid.uid.uidByte[2], HEX);
      Serial.print(rfid.uid.uidByte[3], HEX); 
      Serial.println();                           // 읽은 값들을 시리얼 통신으로 전송
      if(rfid.uid.uidByte[0] == rfidPass0 && rfid.uid.uidByte[1] == rfidPass1 && rfid.uid.uidByte[2] == rfidPass2 && rfid.uid.uidByte[3] == rfidPass3)
      {
        Serial.println("rfid ok");
        lockNunlock = 1;
      }
      rfid.PICC_HaltA();
      rfid.PCD_StopCrypto1();
    }
  }

  if(lockNunlock == 1)
  {
    lockNunlock = 0;
    myservo.write(180);
    digitalWrite(BUZZER_PIN, HIGH);
    delay(200);
    digitalWrite(BUZZER_PIN, LOW);
    delay(200);
    digitalWrite(BUZZER_PIN, HIGH);
    delay(200);
    digitalWrite(BUZZER_PIN, LOW);
    delay(5000);
  }
  else
  {
    myservo.write(90);
  }

}

char getkey()
{
  char key = 0;
  for(int i=0; i<4; i++)
  {
    digitalWrite(rpin[i], LOW);
    for(int j=0; j<4; j++)
    {
      if(digitalRead(cpin[j] == LOW);)
      {
        key = keymap[i][j];
      }
      digitalWrite(rpin[i], HIGH);
    }
  }
  return key; 
}
 